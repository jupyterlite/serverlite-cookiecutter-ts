name: CI

on:
  push:
    branches: ["*.0"]
  pull_request:
    branches: ["*"]
  schedule:
    - cron: "0 0 * * *"

jobs:
  names:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - name: "my_extension"
            pyname: "my_extension"
          - name: "myextension"
            pyname: "myextension"
          - name: "my-extension"
            pyname: "my_extension"

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: |
          python -m pip install cookiecutter check-manifest build

      - name: Create pure frontend extension
        env:
          NAME: ${{ matrix.name }}
          PYNAME: ${{ matrix.pyname }}
        run: |
          set -eux
          # Trick to use custom parameters
          python -c "from cookiecutter.main import cookiecutter; import json, os; f=open('cookiecutter.json'); d=json.load(f); f.close(); d['labextension_name']=os.getenv('NAME'); cookiecutter('.', extra_context=d, no_input=True)"
          pushd ${PYNAME}
          pip install jupyterlab
          jlpm install && jlpm run eslint:check
          pip install -e .
          jupyter labextension develop . --overwrite
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "${NAME}.*OK"
          python -m jupyterlab.browser_check

          jupyter labextension uninstall ${NAME}
          pip uninstall -y ${NAME} jupyterlab

          git init && git add .
          check-manifest -v

          popd
          rm -rf ${NAME}

  settings:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: |
          python -m pip install cookiecutter check-manifest build

      - name: Create pure frontend extension
        run: |
          set -eux
          # Trick to use custom parameters
          python -c "from cookiecutter.main import cookiecutter; import json; f=open('cookiecutter.json'); d=json.load(f); f.close(); d['has_settings']='y'; cookiecutter('.', extra_context=d, no_input=True)"
          pushd myextension
          pip install jupyterlab
          jlpm install
          pip install -e .
          jupyter labextension develop . --overwrite
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
          python -m jupyterlab.browser_check

          jupyter labextension uninstall myextension
          pip uninstall -y myextension jupyterlab

          git init && git add .
          check-manifest -v

          popd
          rm -rf myextension

  server:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"

      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Setup yarn cache
        uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            yarn-

      - name: Install dependencies
        run: |
          python -m pip install cookiecutter check-manifest build

    
      - name: Check pip install method
        run: |
          set -eux
          jupyter server extension list
          jupyter server extension list 2>&1 | grep -ie "myextension.*OK"
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"

          # This test should be made outside the extension folder
          python -m jupyterlab.browser_check

          pip uninstall -y myextension jupyterlab
          rm -rf myextension
        shell: bash

      - name: Check pip develop method
        run: |
          set -eux
          jupyter server extension list
          jupyter server extension list 2>&1 | grep -ie "myextension.*OK"
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"

          # This test should be made outside the extension folder
          python -m jupyterlab.browser_check
        shell: bash

      - name: Build server extension in develop mode
        run: |
          jupyter labextension develop ./myextension --overwrite
          jupyter labextension build ./myextension

          jupyter labextension uninstall myextension
          pip uninstall -y myextension jupyterlab

          python -c "import shutil; shutil.rmtree('myextension')"

      - name: Check install tarball method
        run: |
          set -eux
          jupyter labextension list
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
          jupyter server extension list
          jupyter server extension list 2>&1 | grep -ie "myextension.*OK"

          jupyter lab build --dev-build --no-minimize

          python -m jupyterlab.browser_check

          cp myextension/dist/*.tar.gz myextension.tar.gz
          pip uninstall -y myextension jupyterlab
          rm -rf myextension
        shell: bash

      - uses: actions/upload-artifact@v2
        if: startsWith(runner.os, 'Linux')
        with:
          name: myextension-sdist
          path: myextension.tar.gz

  test_isolated:
    needs: server
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.7"
          architecture: "x64"
      - name: Setup pip cache
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: pip-3.7-${{ hashFiles('package.json') }}
          restore-keys: |
            pip-3.7-
            pip-
      - uses: actions/download-artifact@v2
        with:
          name: myextension-sdist
      - name: Install and Test
        run: |
          set -eux
          # Remove NodeJS, twice to take care of system and locally installed node versions.
          sudo rm -rf $(which node)
          sudo rm -rf $(which node)

          pip install myextension.tar.gz
          pip install jupyterlab
          jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
          jupyter server extension list
          jupyter server extension list 2>&1 | grep -ie "myextension.*OK"
          python -m jupyterlab.browser_check --no-chrome-test
